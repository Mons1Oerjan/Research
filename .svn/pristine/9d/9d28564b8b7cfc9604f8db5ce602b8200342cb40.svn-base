package com.example.research;

import com.vaadin.testbench.By;
import com.vaadin.testbench.ScreenshotOnFailureRule;
import com.vaadin.testbench.TestBenchTestCase;
import com.vaadin.testbench.elements.ButtonElement;
import com.vaadin.testbench.elements.LabelElement;
import com.vaadin.testbench.elements.NotificationElement;
import com.vaadin.testbench.elements.PasswordFieldElement;
import com.vaadin.testbench.elements.TextFieldElement;

import org.junit.Before;
import org.junit.Rule;
import org.junit.Test;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertTrue;

/**
 * This class contains JUnit tests, which are run using Vaadin TestBench 4.
 * This class tests the Researcher UI.
 */
public class ResearchTestBench extends TestBenchTestCase {

	@Rule
    public ScreenshotOnFailureRule screenshotOnFailureRule =
            new ScreenshotOnFailureRule(this, true);
	
	/**
	 * Sets the driver to a new Chromedriver
	 * @throws Exception
	 */
    @Before
    public void setUp() throws Exception {
    	setDriver(new ChromeDriver()); // Chrome
    	
    }
    
    
    /**
     * Opens the URL where the application is deployed.
     */
    private void openTestUrl() {
        getDriver().get("http://localhost:8090/Research");
    }
    
    
    @Test
    // Unit test 032: Test login for participant (user)
    public void testParticipantLogin() throws Exception {
        
    	openTestUrl();
    	
        // At first there should be no label elements
        assertFalse($(LabelElement.class).exists());
        
        TextFieldElement usernameField = $(TextFieldElement.class).caption("User:").first();
        // There should now be one TextField
        assertEquals(1, $(TextFieldElement.class).all().size());
        PasswordFieldElement passwordField = $(PasswordFieldElement.class).caption("Password:").first();
        // There should now be 1 PasswordField
        assertEquals(1, $(PasswordFieldElement.class).all().size());
        
        // Set the username to a user's username
        usernameField.setValue("mons02");
        assertEquals("mons02", $(TextFieldElement.class).first().getValue());
        
        // Set the password to the user's password
        passwordField.setValue("password");
        assertEquals("password", $(PasswordFieldElement.class).first().getValue());

        // Create the button.
        ButtonElement loginButton = $(ButtonElement.class).caption("Login").first();
        // There should now be 1 button
        assertEquals(2, $(ButtonElement.class).all().size());
        
        //Click the button and login as a participant
        loginButton.click();
        
        // This should go to the next page, so there should be 4 labels
        assertEquals(4, $(LabelElement.class).all().size());
        // The first button element should be the sendData button
        assertEquals("Send Data", $(ButtonElement.class).first().getCaption());
        //check if the tracker notification is being called:
        assertEquals("Tracker is ON", $(NotificationElement.class).first().getCaption());
       
        
        // Test Map functionality:
        // Navigate to mapView and test the map:
        assertEquals("Map", driver.findElement(By.id("mapNavButton")).getText());
        driver.findElement(By.id("mapNavButton")).click();
        //we should now have navigated to the map view:
        assertEquals("Data Collection", driver.findElement(By.id("dataCollectionNavButton")).getText());
        assertEquals(true, driver.findElement(By.id("mapView")).isDisplayed());
        assertEquals(true, driver.findElement(By.id("lmap")).isDisplayed());
        
        // navigate back to data collection screen
        driver.findElement(By.id("dataCollectionNavButton")).click();
        assertEquals(true, driver.findElement(By.id("mainView")).isDisplayed());
        // there should be 4 labels
        assertEquals(4, $(LabelElement.class).all().size());
        // The first button element should be the sendData button
        assertEquals("Send Data", $(ButtonElement.class).first().getCaption());
        // End of map-testing
        
        
        //test logout functionality:
        ButtonElement logoutButton = $(ButtonElement.class).caption("Logout").first();
        logoutButton.click();
        // There should now be 1 textfield, 1 passwordfield and 1 button 
        assertEquals(1, $(PasswordFieldElement.class).all().size());
        assertEquals(1, $(TextFieldElement.class).all().size());
        assertEquals(2, $(ButtonElement.class).all().size());
    }
    
    @Test
    // Unit test 033: Test login for researcher
    public void testResearcherLogin() throws Exception {
        
    	openTestUrl();
    	
        // At first there should be no labels
        assertFalse($(LabelElement.class).exists());
        
        TextFieldElement usernameField = $(TextFieldElement.class).caption("User:").first();
        // There should now be one textfield
        assertEquals(1, $(TextFieldElement.class).all().size());
        PasswordFieldElement passwordField = $(PasswordFieldElement.class).caption("Password:").first();
        // There should now be one passwordfield
        assertEquals(1, $(PasswordFieldElement.class).all().size());
        
        // Set the username value to a researcher's username and test
        usernameField.setValue("mons01");
        assertEquals("mons01", $(TextFieldElement.class).first().getValue());
        
        // Set the password value to a researcher's password and test
        passwordField.setValue("password");
        assertEquals("password", $(PasswordFieldElement.class).first().getValue());

        // Create a button
        ButtonElement loginButton = $(ButtonElement.class).caption("Login").first();
        // There should now be 1 button element
        assertEquals(2, $(ButtonElement.class).all().size());
        
        //click the button to login as a researcher
        loginButton.click();
        
        // This should go to the next page, so there should be 2 labels, and the first button should be Logout
        assertEquals(1, $(LabelElement.class).all().size());
        assertEquals("Logout", $(ButtonElement.class).first().getCaption());
       
        //test logout functionality:
        ButtonElement logoutButton = $(ButtonElement.class).caption("Logout").first();
        logoutButton.click();
        //There should now be 1 textfield, 1 passwordfield and 1 button element
        assertEquals(1, $(PasswordFieldElement.class).all().size());
        assertEquals(1, $(TextFieldElement.class).all().size());
        assertEquals(2, $(ButtonElement.class).all().size());
    }
   
    @Test
    // Unit test 034: Test data collection switch for participant (user)
    public void testParticipantSwitch() throws Exception {
        
    	openTestUrl();
    	
        // At first there should be no labels
        assertFalse($(LabelElement.class).exists());
        
        TextFieldElement usernameField = $(TextFieldElement.class).caption("User:").first();
        // There should now be one label
        assertEquals(1, $(TextFieldElement.class).all().size());
        PasswordFieldElement passwordField = $(PasswordFieldElement.class).caption("Password:").first();
        // There should now be two labels
        assertEquals(1, $(PasswordFieldElement.class).all().size());
        
        usernameField.setValue("mons02");
        // ... with the specified text
        assertEquals("mons02", $(TextFieldElement.class).first().getValue());
        
       
        passwordField.setValue("password");
        assertEquals("password", $(PasswordFieldElement.class).first().getValue());

        // Click the button
        ButtonElement loginButton = $(ButtonElement.class).caption("Login").first();
        // There should now be three labels
        assertEquals(2, $(ButtonElement.class).all().size());
        
        loginButton.click();
        
        // This should go to the next page, so there should be 4 labels
        assertEquals(4, $(LabelElement.class).all().size());
        assertEquals("Send Data", $(ButtonElement.class).first().getCaption());
        
        //click the User Acount Info Button
        driver.findElement(By.className("v-touchkit-navbutton-back")).click();
        //previousView.click();
        
        //click the switch
        WebElement input = driver.findElement(By.id("projectSwitch"));
        input.click();
        assertTrue(input.isEnabled());
        //assertFalse(ParticipantView.trackingOn);
        
    }
    

}